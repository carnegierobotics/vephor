#
# Copyright 2025
# Carnegie Robotics, LLC
# 4501 Hatfield Street, Pittsburgh, PA 15201
# https://www.carnegierobotics.com
#
# Significant history (date, user, action):
#   2025-04-24, emusser@carnegierobotics.com, 2045.01.3, Created file.
#
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Carnegie Robotics, LLC nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CARNEGIE ROBOTICS, LLC BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import os

# The underlying C++ library requires access to certain libraries and executables
# created during the build process.  These executables are installed in the Python
# package directory.  This file also resides in the package directory.  Augment the
# PATH and LD_LIBRARY_PATH so that the underlying library can find the required
# executables.
_pkg_dir = os.path.dirname(os.path.abspath(__file__))
os.environ["PATH"] = (
    os.path.join(_pkg_dir, os.path.basename("@INSTALL_BINDIR@"))
    + os.pathsep
    + os.environ.get("PATH", "")
)

lib_dirs = [os.path.join(_pkg_dir, os.path.basename("@INSTALL_LIBDIR@"))]

if "CONDA_PREFIX" in os.environ:
    env_lib_dir = f"{os.environ['CONDA_PREFIX']}/lib"
    print(f"Env lib dir located: {env_lib_dir}")
    lib_dirs.append(env_lib_dir)
else:
    pkg_dir_walk = _pkg_dir
    parts = []
    envs_found = False
    while True:
        next_pkg_dir_walk, part = os.path.split(pkg_dir_walk)
        if next_pkg_dir_walk == pkg_dir_walk:
            break
        pkg_dir_walk = next_pkg_dir_walk
        parts.append(part)
        if part == "envs":
            envs_found = True
            break

    if envs_found and len(parts) >= 2:
        env_lib_dir = f"{pkg_dir_walk}/envs/{parts[-2]}/lib"
        print(f"Env lib dir located: {env_lib_dir}")
        lib_dirs.append(env_lib_dir)

lib_dirs.append(os.environ.get("LD_LIBRARY_PATH", ""))

os.environ["LD_LIBRARY_PATH"] = os.pathsep.join(lib_dirs)


# Hack to support MinGW
if os.name == "nt":
    os.add_dll_directory("C:/msys64/mingw64/bin")

from .@MODULE_NAME@ import *
